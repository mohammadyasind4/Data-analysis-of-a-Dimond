import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the diamonds dataset
diamonds = sns.load_dataset('diamonds')

# === Data Exploration ===
def explore_data(df):
    print("Dataset Shape:", df.shape)
    print("\nDataset Info:")
    print(df.info())
    print("\nNumerical Summary:")
    print(df.describe())
    print("\nCategorical Summary:")
    for col in df.select_dtypes(include='category').columns:
        print(f"\n{col} unique values: {df[col].unique()}")
    print("\nMissing Values:")
    print(df.isnull().sum())

# === Visualization Functions ===
# 1. Distribution of numerical features
def plot_distributions(df):
    numerical_cols = ['price', 'carat', 'depth', 'table', 'x', 'y', 'z']
    plt.figure(figsize=(15, 10))
    for i, col in enumerate(numerical_cols, 1):
        plt.subplot(3, 3, i)
        sns.histplot(data=df, x=col, kde=True, color="skyblue")
        plt.title(f'Distribution of {col}')
    plt.tight_layout()
    plt.show()

# 2. Price relationship with categorical features
def plot_price_categorical(df):
    categorical_cols = ['cut', 'color', 'clarity']
    plt.figure(figsize=(15, 5))
    for i, col in enumerate(categorical_cols, 1):
        plt.subplot(1, 3, i)
        sns.boxplot(data=df, x=col, y='price', palette='Set2')
        plt.xticks(rotation=45)
        plt.title(f'{col} vs Price')
    plt.tight_layout()
    plt.show()

# 3. Correlation heatmap for numerical features
def plot_correlation(df):
    numerical_cols = ['price', 'carat', 'depth', 'table', 'x', 'y', 'z']
    correlation_matrix = df[numerical_cols].corr()
    plt.figure(figsize=(10, 8))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
    plt.title('Correlation Matrix')
    plt.show()

# 4. Price vs Carat with hue by Cut
def plot_price_vs_carat(df):
    plt.figure(figsize=(12, 6))
    sns.scatterplot(data=df, x='carat', y='price', hue='cut', alpha=0.7, palette='viridis')
    plt.title('Price vs Carat by Cut')
    plt.show()

# 5. Count plot for categorical features
def plot_categorical_counts(df):
    categorical_cols = ['cut', 'color', 'clarity']
    plt.figure(figsize=(15, 5))
    for i, col in enumerate(categorical_cols, 1):
        plt.subplot(1, 3, i)
        sns.countplot(data=df, x=col, palette='pastel')
        plt.title(f'Count of {col}')
        plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# === Main Function for Analysis ===
def analyze_diamonds():
    print("=== Data Exploration ===")
    explore_data(diamonds)

    print("\n=== Numerical Distributions ===")
    plot_distributions(diamonds)

    print("\n=== Price and Categorical Features ===")
    plot_price_categorical(diamonds)

    print("\n=== Correlation Analysis ===")
    plot_correlation(diamonds)

    print("\n=== Price vs Carat ===")
    plot_price_vs_carat(diamonds)

    print("\n=== Count of Categorical Features ===")
    plot_categorical_counts(diamonds)

    # Key insights summary
    print("\n=== Key Insights ===")
    print(f"Average Price of Diamonds: ${diamonds['price'].mean():,.2f}")
    print(f"Most Common Cut: {diamonds['cut'].mode()[0]}")
    print(f"Price Correlation with Carat: {diamonds['price'].corr(diamonds['carat']):.3f}")

# Run the analysis
if __name__ == "__main__":
    analyze_diamonds()
